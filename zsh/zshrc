# Modern Zsh Configuration for Development Workflow
# Optimized for macOS with Ghostty, AeroSpace, tmux, and development tools

# Performance measurement (remove in production)
# zmodload zsh/zprof

# Environment Variables
# =====================

export EDITOR="nvim"
export VISUAL="nvim" 
export PAGER="less"
export BROWSER="open"

# Development directories
export CODE_DIR="$HOME/code"
export DOTFILES_DIR="$HOME/.dotfiles"

# Tool configurations
export HOMEBREW_NO_ANALYTICS=1
export HOMEBREW_NO_AUTO_UPDATE=1

# Path Configuration
# ==================

# Homebrew path (Apple Silicon vs Intel)
if [[ $(uname -m) == "arm64" ]]; then
    export HOMEBREW_PREFIX="/opt/homebrew"
else
    export HOMEBREW_PREFIX="/usr/local"
fi

# PATH setup
typeset -U path PATH
path=(
    $HOME/.local/bin
    $HOMEBREW_PREFIX/bin
    $HOMEBREW_PREFIX/sbin
    /usr/local/bin
    /usr/bin
    /bin
    /usr/sbin
    /sbin
    $path
)

# Oh My Zsh Configuration
# =======================

export ZSH="$HOME/.oh-my-zsh"

# Theme
ZSH_THEME="robbyrussell"

# Plugins
plugins=(
    git
    brew
    macos
    tmux
    fzf
    zsh-autosuggestions
    zsh-syntax-highlighting
)

# Plugin settings
ZSH_TMUX_AUTOSTART=false
ZSH_TMUX_AUTOCONNECT=false

# Source Oh My Zsh
source $ZSH/oh-my-zsh.sh

# Custom Configuration
# ====================

# History configuration
HISTSIZE=10000
SAVEHIST=10000
HISTFILE="$HOME/.zsh_history"

setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt SHARE_HISTORY
setopt APPEND_HISTORY
setopt INC_APPEND_HISTORY

# Completion configuration
autoload -Uz compinit
compinit

# Case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# Colored completion
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# Menu selection
zstyle ':completion:*' menu select

# Directory navigation
setopt AUTO_CD
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS

# Development Aliases
# ===================

# Basic utilities
alias ll='eza -la --icons --git'
alias ls='eza --icons'
alias la='eza -la --icons'
alias lt='eza --tree --level=2 --icons'
alias cat='bat'
alias grep='rg'
alias find='fd'

# Git aliases
alias g='git'
alias ga='git add'
alias gaa='git add .'
alias gc='git commit'
alias gcm='git commit -m'
alias gco='git checkout'
alias gcb='git checkout -b'
alias gst='git status'
alias gl='git log --oneline --graph --decorate'
alias gp='git push'
alias gpl='git pull'
alias gf='git fetch'
alias gd='git diff'
alias gb='git branch'
alias lg='lazygit'

# Development shortcuts
alias vim='nvim'
alias vi='nvim'
alias n='nvim'
alias c='code'
alias t='tmux-sessionizer'
alias ta='tmux attach'
alias tl='tmux list-sessions'
alias tk='tmux kill-session'

# Directory shortcuts
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias home='cd ~'
alias code='cd $CODE_DIR'
alias dots='cd $DOTFILES_DIR'

# Package management
alias bi='brew install'
alias bs='brew search'
alias bu='brew update && brew upgrade'
alias bc='brew cleanup'
alias bl='brew list'

# Network and system
alias ip='curl -s https://ipinfo.io/ip'
alias ports='lsof -i -P -n | grep LISTEN'
alias flush='sudo dscacheutil -flushcache'

# Quick edits
alias zshrc='nvim ~/.zshrc'
alias vimrc='nvim ~/.config/nvim/init.lua'
alias tmuxrc='nvim ~/.tmux.conf'
alias gitconfig='nvim ~/.gitconfig'

# Development Functions
# =====================

# Quick project creation
mkproject() {
    local project_name="$1"
    local project_type="${2:-generic}"
    
    if [[ -z "$project_name" ]]; then
        echo "Usage: mkproject <name> [type]"
        echo "Types: js, ts, rust, go, python, generic"
        return 1
    fi
    
    local project_dir="$CODE_DIR/personal/$project_name"
    mkdir -p "$project_dir"
    cd "$project_dir"
    
    case "$project_type" in
        js|javascript)
            bun init -y
            echo "node_modules/" > .gitignore
            ;;
        ts|typescript)
            bun init -y
            echo '{"compilerOptions":{"target":"ES2020","module":"ESNext","strict":true}}' > tsconfig.json
            echo "node_modules/" > .gitignore
            ;;
        rust)
            cargo init .
            ;;
        go)
            go mod init "$project_name"
            echo "main.go" | xargs touch
            ;;
        python)
            python3 -m venv venv
            echo "venv/" > .gitignore
            echo "__pycache__/" >> .gitignore
            ;;
    esac
    
    git init
    git add .
    git commit -m "Initial commit"
    
    echo "Created $project_type project: $project_name"
}

# Clone and enter directory
gcl() {
    if [[ -z "$1" ]]; then
        echo "Usage: gcl <repository-url> [directory]"
        return 1
    fi
    
    local repo_url="$1"
    local target_dir="$2"
    
    if [[ -z "$target_dir" ]]; then
        target_dir=$(basename "$repo_url" .git)
    fi
    
    git clone "$repo_url" "$target_dir" && cd "$target_dir"
}

# Worktree management
wt() {
    local action="$1"
    shift
    
    case "$action" in
        new|create)
            setup-worktree.sh "$@"
            ;;
        list|ls)
            git worktree list
            ;;
        remove|rm)
            if [[ -n "$1" ]]; then
                git worktree remove "$1"
            else
                echo "Usage: wt remove <worktree-path>"
            fi
            ;;
        cleanup)
            setup-worktree.sh --cleanup
            ;;
        *)
            echo "Usage: wt {new|list|remove|cleanup} [args...]"
            echo "  new <name> [opts]  - Create new worktree"
            echo "  list               - List all worktrees"
            echo "  remove <path>      - Remove worktree"
            echo "  cleanup            - Clean up merged worktrees"
            ;;
    esac
}

# tmux project sessions
project() {
    local project_name="$1"
    
    if [[ -z "$project_name" ]]; then
        tmux-sessionizer
        return
    fi
    
    local project_path="$CODE_DIR/personal/$project_name"
    
    if [[ ! -d "$project_path" ]]; then
        echo "Project not found: $project_path"
        return 1
    fi
    
    tmux-sessionizer "$project_path"
}

# Quick note taking
note() {
    local note_name="${1:-$(date +%Y%m%d_%H%M%S)}"
    local notes_dir="$HOME/Documents/notes"
    
    mkdir -p "$notes_dir"
    nvim "$notes_dir/$note_name.md"
}

# Weather check
weather() {
    local city="${1:-}"
    curl -s "wttr.in/$city?format=3"
}

# GitHub CLI shortcuts
prs() {
    if command -v gh &> /dev/null; then
        gh pr list
    else
        echo "GitHub CLI not installed"
    fi
}

issues() {
    if command -v gh &> /dev/null; then
        gh issue list
    else
        echo "GitHub CLI not installed"
    fi
}

# Tool Integration
# ================

# fzf configuration
if command -v fzf &> /dev/null; then
    export FZF_DEFAULT_COMMAND='fd --type f --hidden --follow --exclude .git'
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'
    
    # Source fzf key bindings and completion
    [[ -f ~/.fzf.zsh ]] && source ~/.fzf.zsh
    
    # Custom fzf functions
    fcd() {
        local dir
        dir=$(fd --type d | fzf --preview 'eza --tree --level=1 {}') &&
        cd "$dir"
    }
    
    fcode() {
        local file
        file=$(fd --type f | fzf --preview 'bat --color=always {}') &&
        code "$file"
    }
fi

# Bun configuration
if command -v bun &> /dev/null; then
    export BUN_INSTALL="$HOME/.bun"
    export PATH="$BUN_INSTALL/bin:$PATH"
    
    # Bun aliases
    alias b='bun'
    alias br='bun run'
    alias bi='bun install'
    alias ba='bun add'
    alias bad='bun add --dev'
    alias bt='bun test'
fi

# Docker shortcuts (if needed)
if command -v docker &> /dev/null; then
    alias d='docker'
    alias dc='docker-compose'
    alias dps='docker ps'
    alias di='docker images'
    alias drm='docker rm $(docker ps -aq)'
    alias drmi='docker rmi $(docker images -q)'
fi

# Claude Code integration
if command -v claude &> /dev/null; then
    alias ai='claude'
    alias code-ai='claude --project .'
    
    # Start AI session for current project
    ai-session() {
        if [[ -f ".claude.json" ]]; then
            claude --config .claude.json
        else
            claude --project .
        fi
    }
fi

# Conditional Configuration
# =========================

# Load additional configuration files
[[ -f "$DOTFILES_DIR/zsh/aliases.zsh" ]] && source "$DOTFILES_DIR/zsh/aliases.zsh"
[[ -f "$DOTFILES_DIR/zsh/functions.zsh" ]] && source "$DOTFILES_DIR/zsh/functions.zsh"

# Load machine-specific configuration
[[ -f ~/.zshrc.local ]] && source ~/.zshrc.local

# Load work-specific configuration
[[ -f ~/.zshrc.work ]] && source ~/.zshrc.work

# iTerm2 integration (if present)
[[ -f ~/.iterm2_shell_integration.zsh ]] && source ~/.iterm2_shell_integration.zsh

# Autoload tmux on Ghostty startup (optional)
if [[ -n "$GHOSTTY" && -z "$TMUX" ]]; then
    # Uncomment to auto-start tmux
    # exec tmux-sessionizer
fi

# Performance measurement (remove in production)
# zprof

# Welcome message
echo "ðŸš€ Development environment loaded!"
echo "ðŸ’¡ Type 't' for project sessions, 'wt' for worktrees, or 'ai' for Claude Code"